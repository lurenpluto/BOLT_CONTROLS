/*******************************************************************************
* 版权所有 (C)2009,深圳市迅雷网络技术有限公司。
* 系统名称	: 迅雷公共库
* 文件名称	: thread.h
* 内容摘要	: 线程实现的封装
* 当前版本	: 1.0
* 作    者	: 王卫华
* 设计日期	: 2009年2月24日
* 修改记录	: 
* 日    期		版    本		修改人 		修改摘要
*******************************************************************************/
/**************************** 条件编译选项和头文件 ****************************/
#ifndef __THREAD_H_F92A8139_8B3A_49b1_AC4A_F4CE55E67DAB__  
#define __THREAD_H_F92A8139_8B3A_49b1_AC4A_F4CE55E67DAB__  

#include "xl_lib/type.h"

XL_WIN32_NAMESPACE_BEGIN(multithread)

/********************************** 常量和宏 **********************************/

/********************************** 数据类型 **********************************/

/********************************** 函数声明 **********************************/

/*********************************** 类定义 ***********************************/
class thread
{	
public:
    thread();
    virtual ~thread();

    /*******************************************************************************
    * 函数名称  : thread::start
    * 功能描述  : 创建线程，并根据参数决定是否立即运行线程
    * 参　　数  : bool create_suspend       true:创建后挂起线程 false:立即运行线程
    * 返 回 值  : void
    * 作　　者  : 杨晓虎
    * 设计日期  : 2009年4月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    void            start( bool create_suspend = false );	

    /*******************************************************************************
    * 函数名称  : thread::stop
    * 功能描述  : 停止执行线程并销毁。需要派生类在 thread_proc 中配合，一旦发现
                stop event 被置，则立刻退出线程函数执行。stop 的等待时间取决于
                thread_proc 的响应退出事件的时间。
                必须在调用过start之后调用。
    * 返 回 值  : void
    * 作　　者  : 杨晓虎
    * 设计日期  : 2009年4月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    void            stop();

    /*******************************************************************************
    * 函数名称  : thread::try_stop
    * 功能描述  : 尝试停止线程，并等待 wait_millisec，如果线程依然无法停止，则按照参数
                  强杀该线程。必须在调用过start之后调用。
                  强杀线程不到万不得已不要用啊。容易引起一些锁的状态异常造成死锁。
                  如果是要在进程退出时强杀，还不如不要强杀，不管它就好。
    * 参　　数  : xl::uint32 wait_millisec          停止线程等待的时间
    * 参　　数  : bool terminate_if_stop_failed     是否强杀线程如果等待时间已过线程依然不停止
    * 参　　数  : xl::uint32 terminate_exit_code    如果强杀线程，则指定的线程退出码
    * 返 回 值  : bool                              线程是否被停止
    * 作　　者  : 杨晓虎
    * 设计日期  : 2010年6月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    bool            try_stop( xl::uint32 wait_millisec = 0,
                              bool terminate_if_stop_failed = false,
                              xl::uint32 terminate_exit_code = -1 );

    /*******************************************************************************
    * 函数名称  : terminate
    * 功能描述  : 强杀线程。不到万不得已不要用啊。容易引起一些锁的状态异常造成死锁。
                  如果是要在进程退出时强杀，还不如不要强杀，不管它就好。
                  必须在调用过start之后调用。
    * 参　　数  : xl::uint32 terminate_exit_code 强杀线程的退出码
    * 返 回 值  : bool  是否强杀成功
    * 作　　者  : 杨晓虎
    * 设计日期  : 2010年6月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    bool            terminate( xl::uint32 exit_code );

    /*******************************************************************************
    * 函数名称  : thread::suspend
    * 功能描述  : 挂起线程，线程将停止运行。必须在调用过start之后调用。
    * 返 回 值  : void
    * 作　　者  : 杨晓虎
    * 设计日期  : 2009年4月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    void            suspend();

    /*******************************************************************************
    * 函数名称  : thread::resume
    * 功能描述  : 让挂起的线程恢复运行。必须在调用过start之后调用。
    * 返 回 值  : void
    * 作　　者  : 杨晓虎
    * 设计日期  : 2009年4月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    void            resume();

    /*******************************************************************************
    * 函数名称  : thread::is_in_thread
    * 功能描述  : 当前是否在线程中执行。必须在调用过start之后调用。
    * 返 回 值  : bool      true:表示当前在线程中 false:当前不在线程中
    * 作　　者  : 杨晓虎
    * 设计日期  : 2009年4月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    bool            is_in_thread();

    /*******************************************************************************
    * 函数名称	: thread::get_thread_id
    * 功能描述	: 获取该线程的id。必须在调用过start之后调用。
    * 返 回 值	: uint32
    * 作　　者	: 杨晓虎修订
    * 设计日期	: 2008年11月21日
    * 修改日期		   修改人		  修改内容
    *******************************************************************************/
    uint32          get_thread_id();

    /*******************************************************************************
    * 函数名称  : thread::get_thread_handle
    * 功能描述  : 获得线程的句柄。必须在调用过start之后调用。
    * 返 回 值  : HANDLE        线程的句柄
    * 作　　者  : 杨晓虎
    * 设计日期  : 2009年4月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    HANDLE          get_thread_handle(); // 如果出现编译错误 HANDLE 未定义，请在自己的 cpp 中 #include "thread.h" 之前先 #include <Windows.h>

    /*******************************************************************************
    * 函数名称  : thread::get_stop_event
    * 功能描述  : 获得线程停止事件的句柄。用于在用户自己派生的thread_proc中判断外界是否需要停止线程。
                  必须在调用过start之后调用。
    * 返 回 值  : HANDLE        线程停止事件的句柄
    * 作　　者  : 杨晓虎
    * 设计日期  : 2009年4月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    HANDLE          get_stop_event();

    /*******************************************************************************
    * 函数名称  : thread::is_stop_event_set
    * 功能描述  : 查询线程停止事件是否被置位（非阻塞调用）。必须在调用过start之后调用。
    * 返 回 值  : bool          true:被置位 false：未置位
    * 作　　者  : 杨晓虎
    * 设计日期  : 2009年4月3日
    * 修改日期         修改人         修改内容
    *******************************************************************************/
    bool            is_stop_event_set();
	
protected:
    virtual xl::uint32  thread_proc() = 0;
	
private:
    static unsigned __stdcall thread_entry(void* param);

    DWORD           m_thread_id;			// 线程的ID
    HANDLE          m_thread_handle;		// 线程的句柄
    HANDLE          m_stop_event;           // 停止线程的事件
};

XL_WIN32_NAMESPACE_END(multithread)

#endif // end of __THREAD_H_F92A8139_8B3A_49b1_AC4A_F4CE55E67DAB__  
